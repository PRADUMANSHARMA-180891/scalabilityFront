{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\n// Thunk for logging in the user\nexport const createCompany = createAsyncThunk(\"createCompany\", async ({\n  company_name,\n  company_size,\n  first_name,\n  last_name,\n  email,\n  phone,\n  role,\n  business_habit\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const res = await fetch(`http://localhost:8000/company/create`, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        company_name,\n        company_size,\n        first_name,\n        last_name,\n        email,\n        phone,\n        role,\n        business_habit\n      })\n    });\n    if (!res.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    return res.json();\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\n\n// Thunk for fetching user data\n// export const fetchUserData = createAsyncThunk(\"fetchUserData\", async () => {\n//   const res = await fetch(`http://localhost:8000/user/getlogin`);\n//   return res.json();\n// });\n\n// Auth slice\nconst companySlice = createSlice({\n  name: \"company\",\n  initialState: {\n    isLoading: false,\n    user: null,\n    isError: false,\n    errorMessage: null\n  },\n  extraReducers: builder => {\n    builder.addCase(createCompany.pending, state => {\n      state.isLoading = true;\n      state.isError = false;\n      state.errorMessage = null;\n    });\n    builder.addCase(createCompany.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.user = action.payload;\n    });\n    builder.addCase(createCompany.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.errorMessage = action.payload;\n    });\n    // builder.addCase(fetchUserData.pending, (state) => {\n    //   state.isLoading = true;\n    //   state.isError = false;\n    // });\n    // builder.addCase(fetchUserData.fulfilled, (state, action) => {\n    //   state.isLoading = false;\n    //   state.user = action.payload;\n    // });\n    // builder.addCase(fetchUserData.rejected, (state) => {\n    //   state.isLoading = false;\n    //   state.isError = true;\n    // });\n  }\n});\nexport default companySlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","createCompany","company_name","company_size","first_name","last_name","email","phone","role","business_habit","rejectWithValue","res","fetch","method","headers","body","JSON","stringify","ok","Error","json","error","message","companySlice","name","initialState","isLoading","user","isError","errorMessage","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","reducer"],"sources":["C:/Users/econs/OneDrive/Documents/scalability_frontend/admin-dashboard/src/pages/company/CompanySlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\n// Thunk for logging in the user\r\nexport const createCompany = createAsyncThunk(\r\n  \"createCompany\",\r\n  async ({ company_name,\r\n    company_size,\r\n    first_name,\r\n    last_name,\r\n    email,\r\n    phone,\r\n    role,\r\n    business_habit }, \r\n    { rejectWithValue }) => {\r\n    try {\r\n      const res = await fetch(`http://localhost:8000/company/create`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ \r\n            company_name,\r\n            company_size,\r\n            first_name,\r\n            last_name,\r\n            email,\r\n            phone,\r\n            role,\r\n            business_habit }),\r\n      });\r\n      if (!res.ok) {\r\n        throw new Error(\"Network response was not ok\");\r\n      }\r\n      return res.json();\r\n    } catch (error) {\r\n      return rejectWithValue(error.message);\r\n    }\r\n  }\r\n);\r\n\r\n// Thunk for fetching user data\r\n// export const fetchUserData = createAsyncThunk(\"fetchUserData\", async () => {\r\n//   const res = await fetch(`http://localhost:8000/user/getlogin`);\r\n//   return res.json();\r\n// });\r\n\r\n// Auth slice\r\nconst companySlice = createSlice({\r\n  name: \"company\",\r\n  initialState: {\r\n    isLoading: false,\r\n    user: null,\r\n    isError: false,\r\n    errorMessage: null,\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(createCompany.pending, (state) => {\r\n      state.isLoading = true;\r\n      state.isError = false;\r\n      state.errorMessage = null;\r\n    });\r\n    builder.addCase(createCompany.fulfilled, (state, action) => {\r\n      state.isLoading = false;\r\n      state.user = action.payload;\r\n    });\r\n    builder.addCase(createCompany.rejected, (state, action) => {\r\n      state.isLoading = false;\r\n      state.isError = true;\r\n      state.errorMessage = action.payload;\r\n    });\r\n    // builder.addCase(fetchUserData.pending, (state) => {\r\n    //   state.isLoading = true;\r\n    //   state.isError = false;\r\n    // });\r\n    // builder.addCase(fetchUserData.fulfilled, (state, action) => {\r\n    //   state.isLoading = false;\r\n    //   state.user = action.payload;\r\n    // });\r\n    // builder.addCase(fetchUserData.rejected, (state) => {\r\n    //   state.isLoading = false;\r\n    //   state.isError = true;\r\n    // });\r\n  },\r\n});\r\n\r\nexport default companySlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;;AAEhE;AACA,OAAO,MAAMC,aAAa,GAAGD,gBAAgB,CAC3C,eAAe,EACf,OAAO;EAAEE,YAAY;EACnBC,YAAY;EACZC,UAAU;EACVC,SAAS;EACTC,KAAK;EACLC,KAAK;EACLC,IAAI;EACJC;AAAe,CAAC,EAChB;EAAEC;AAAgB,CAAC,KAAK;EACxB,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,sCAAqC,EAAE;MAC9DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBf,YAAY;QACZC,YAAY;QACZC,UAAU;QACVC,SAAS;QACTC,KAAK;QACLC,KAAK;QACLC,IAAI;QACJC;MAAe,CAAC;IACtB,CAAC,CAAC;IACF,IAAI,CAACE,GAAG,CAACO,EAAE,EAAE;MACX,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,OAAOR,GAAG,CAACS,IAAI,CAAC,CAAC;EACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAOX,eAAe,CAACW,KAAK,CAACC,OAAO,CAAC;EACvC;AACF,CACF,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAMC,YAAY,GAAGxB,WAAW,CAAC;EAC/ByB,IAAI,EAAE,SAAS;EACfC,YAAY,EAAE;IACZC,SAAS,EAAE,KAAK;IAChBC,IAAI,EAAE,IAAI;IACVC,OAAO,EAAE,KAAK;IACdC,YAAY,EAAE;EAChB,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAAC/B,aAAa,CAACgC,OAAO,EAAGC,KAAK,IAAK;MAChDA,KAAK,CAACR,SAAS,GAAG,IAAI;MACtBQ,KAAK,CAACN,OAAO,GAAG,KAAK;MACrBM,KAAK,CAACL,YAAY,GAAG,IAAI;IAC3B,CAAC,CAAC;IACFE,OAAO,CAACC,OAAO,CAAC/B,aAAa,CAACkC,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC1DF,KAAK,CAACR,SAAS,GAAG,KAAK;MACvBQ,KAAK,CAACP,IAAI,GAAGS,MAAM,CAACC,OAAO;IAC7B,CAAC,CAAC;IACFN,OAAO,CAACC,OAAO,CAAC/B,aAAa,CAACqC,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACzDF,KAAK,CAACR,SAAS,GAAG,KAAK;MACvBQ,KAAK,CAACN,OAAO,GAAG,IAAI;MACpBM,KAAK,CAACL,YAAY,GAAGO,MAAM,CAACC,OAAO;IACrC,CAAC,CAAC;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF;AACF,CAAC,CAAC;AAEF,eAAed,YAAY,CAACgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}