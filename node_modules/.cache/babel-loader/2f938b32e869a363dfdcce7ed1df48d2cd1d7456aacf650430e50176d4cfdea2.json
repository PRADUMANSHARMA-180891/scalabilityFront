{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\n// Thunk for logging in the user\nexport const loginUser = createAsyncThunk(\"loginUser\", async ({\n  email,\n  user_password\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const res = await fetch(`http://localhost:8000/user/postlogin`, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        user_password\n      })\n    });\n    if (!res.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const data = await res.json();\n    // Store the token in local storage\n    localStorage.setItem(\"token\", data.token);\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\n\n// Thunk for fetching user data\n// export const fetchUserData = createAsyncThunk(\n//   \"fetchUserData\",\n//   async (_, { rejectWithValue }) => {\n//     const token = localStorage.getItem(\"token\");\n//     if (!token) {\n//       return rejectWithValue(\"No token found\");\n//     }\n\n//     try {\n//       const res = await fetch(`http://localhost:8000/user/getlogin`, {\n//         headers: {\n//           authorization: `Bearer ${token}`,\n//         },\n//       });\n//       if (!res.ok) {\n//         throw new Error(\"Network response was not ok\");\n//       }\n//       return res.status(201).json({message:\"got the token\"});\n//     } catch (error) {\n//       return rejectWithValue(error.message);\n//     }\n//   }\n// );\n// update user \nexport const updateUser = createAsyncThunk(\"updateUser\", async ({\n  Id,\n  ...data\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const res = await fetch(`http://localhost:8000/user/updateuser/${Id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    if (!res.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    return res.json();\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\n\n// Auth slice\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    isLoading: false,\n    user: null,\n    isError: false,\n    errorMessage: null\n  },\n  extraReducers: builder => {\n    builder.addCase(loginUser.pending, state => {\n      state.isLoading = true;\n      state.isError = false;\n      state.errorMessage = null;\n    });\n    builder.addCase(loginUser.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.user = action.payload.user; // Assuming your API returns the user data in `action.payload.user`\n    });\n    builder.addCase(loginUser.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.errorMessage = action.payload;\n    });\n    builder.addCase(fetchUserData.pending, state => {\n      state.isLoading = true;\n      state.isError = false;\n    });\n    builder.addCase(fetchUserData.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.user = action.payload;\n    });\n    builder.addCase(fetchUserData.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.errorMessage = action.payload;\n    });\n    builder.addCase(updateUser.pending, state => {\n      state.isLoading = true;\n      state.isError = false;\n    });\n    builder.addCase(updateUser.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.user = action.payload;\n    });\n    builder.addCase(updateUser.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.errorMessage = action.payload;\n    });\n  }\n});\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","loginUser","email","user_password","rejectWithValue","res","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","localStorage","setItem","token","error","message","updateUser","Id","authSlice","name","initialState","isLoading","user","isError","errorMessage","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","fetchUserData","reducer"],"sources":["C:/Users/econs/OneDrive/Documents/scalability_frontend/admin-dashboard/src/pages/auth/AuthSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\n// Thunk for logging in the user\r\nexport const loginUser = createAsyncThunk(\r\n  \"loginUser\",\r\n  async ({ email, user_password }, { rejectWithValue }) => {\r\n    try {\r\n      const res = await fetch(`http://localhost:8000/user/postlogin`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ email, user_password }),\r\n      });\r\n      if (!res.ok) {\r\n        throw new Error(\"Network response was not ok\");\r\n      }\r\n      const data = await res.json();\r\n      // Store the token in local storage\r\n      localStorage.setItem(\"token\", data.token);\r\n      return data;\r\n    } catch (error) {\r\n      return rejectWithValue(error.message);\r\n    }\r\n  }\r\n);\r\n\r\n// Thunk for fetching user data\r\n// export const fetchUserData = createAsyncThunk(\r\n//   \"fetchUserData\",\r\n//   async (_, { rejectWithValue }) => {\r\n//     const token = localStorage.getItem(\"token\");\r\n//     if (!token) {\r\n//       return rejectWithValue(\"No token found\");\r\n//     }\r\n\r\n//     try {\r\n//       const res = await fetch(`http://localhost:8000/user/getlogin`, {\r\n//         headers: {\r\n//           authorization: `Bearer ${token}`,\r\n//         },\r\n//       });\r\n//       if (!res.ok) {\r\n//         throw new Error(\"Network response was not ok\");\r\n//       }\r\n//       return res.status(201).json({message:\"got the token\"});\r\n//     } catch (error) {\r\n//       return rejectWithValue(error.message);\r\n//     }\r\n//   }\r\n// );\r\n// update user \r\nexport const updateUser = createAsyncThunk(\r\n  \"updateUser\",\r\n  async ({ Id, ...data }, { rejectWithValue }) => {\r\n    try {\r\n      const res = await fetch(`http://localhost:8000/user/updateuser/${Id}`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n      if (!res.ok) {\r\n        throw new Error(\"Network response was not ok\");\r\n      }\r\n      return res.json();\r\n    } catch (error) {\r\n      return rejectWithValue(error.message);\r\n    }\r\n  }\r\n);\r\n\r\n// Auth slice\r\nconst authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: {\r\n    isLoading: false,\r\n    user: null,\r\n    isError: false,\r\n    errorMessage: null,\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(loginUser.pending, (state) => {\r\n      state.isLoading = true;\r\n      state.isError = false;\r\n      state.errorMessage = null;\r\n    });\r\n    builder.addCase(loginUser.fulfilled, (state, action) => {\r\n      state.isLoading = false;\r\n      state.user = action.payload.user; // Assuming your API returns the user data in `action.payload.user`\r\n    });\r\n    builder.addCase(loginUser.rejected, (state, action) => {\r\n      state.isLoading = false;\r\n      state.isError = true;\r\n      state.errorMessage = action.payload;\r\n    });\r\n    builder.addCase(fetchUserData.pending, (state) => {\r\n      state.isLoading = true;\r\n      state.isError = false;\r\n    });\r\n    builder.addCase(fetchUserData.fulfilled, (state, action) => {\r\n      state.isLoading = false;\r\n      state.user = action.payload;\r\n    });\r\n    builder.addCase(fetchUserData.rejected, (state, action) => {\r\n      state.isLoading = false;\r\n      state.isError = true;\r\n      state.errorMessage = action.payload;\r\n    });\r\n    builder.addCase(updateUser.pending, (state) => {\r\n      state.isLoading = true;\r\n      state.isError = false;\r\n    });\r\n    builder.addCase(updateUser.fulfilled, (state, action) => {\r\n      state.isLoading = false;\r\n      state.user = action.payload;\r\n    });\r\n    builder.addCase(updateUser.rejected, (state, action) => {\r\n      state.isLoading = false;\r\n      state.isError = true;\r\n      state.errorMessage = action.payload;\r\n    });\r\n  },\r\n});\r\n\r\nexport default authSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}